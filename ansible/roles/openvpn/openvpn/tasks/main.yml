---
# tasks file for openvpn

# Скачивание необходимых инструментов
- name: install instruments & plugins
  apt:
    name:
      - openvpn
      - easy-rsa
  when: inventory_hostname in groups['openvpn-server']

- name: create PKI directory
  file: path={{ item.path }} owner={{ item.owner }} group={{ item.group }} mode={{ item.mode }} state=directory
  loop:
    - { path: "/easy-rsa", owner: "root", group: "root", mode: "700" }
  when: inventory_hostname in groups['openvpn-server']

- name: create variables for certification centre
  template:
    src: "vars.j2"
    dest: "/usr/share/easy-rsa/vars"
  when: inventory_hostname in groups['openvpn-server']

- stat:
    path: /easy-rsa/pki
  register: pki
  when: inventory_hostname in groups['openvpn-server']

# Создание директории PKI
- name: initialyze PKI in a directory
  shell: |
    /usr/share/easy-rsa/easyrsa init-pki
  args:
    chdir: /easy-rsa
  when: 
    - inventory_hostname in groups['openvpn-server']
    - not pki.stat.exists

# Создание запроса подписи сертификата и закрытого ключа сервера OpenVPN
- name: create crt and private key
  shell: |
    /usr/share/easy-rsa/easyrsa gen-req server nopass
  args:
    chdir: /easy-rsa
  environment:
    EASYRSA_BATCH: 1
  when: inventory_hostname in groups['openvpn-server']

# Копирование ключа сервера
- name: copy additional secret key
  copy:
    src: /easy-rsa/pki/private/server.key
    dest: /etc/openvpn/server/server.key
    remote_src: true
  when: inventory_hostname in groups['openvpn-server']

# Копирование запроса на подпись в центр сертификации
- name: fetch request to host
  fetch:
    src: /easy-rsa/pki/reqs/server.req
    dest: /tmp/server.req
    flat: yes
  when: inventory_hostname in groups['openvpn-server']

- name: copy request to host
  copy:
    src: /tmp/server.req
    dest: /tmp/server.req
  when: inventory_hostname in groups['ca-server']

# Подпись запроса со стороны центра сертификации
- name: import request
  shell: |
    /usr/share/easy-rsa/easyrsa import-req /tmp/server.req server
  args:
    chdir: /easy-rsa
  when: inventory_hostname in groups['ca-server']

- name: sign request
  shell: |
    /usr/share/easy-rsa/easyrsa sign-req server server
  args:
    chdir: /easy-rsa
  environment:
    EASYRSA_BATCH: 1
  when: inventory_hostname in groups['ca-server']

# Копирование запроса на подпись в центр сертификации
- name: fetch request to host
  fetch:
    src: /easy-rsa/pki/issued/server.crt
    dest: /tmp/server.crt
    flat: yes
  when: inventory_hostname in groups['ca-server']

- name: copy request to host
  copy:
    src: /tmp/server.crt
    dest: /etc/openvpn/server/server.crt
  when: inventory_hostname in groups['openvpn-server']

# Копирование запроса на подпись в центр сертификации
- name: fetch request to host
  fetch:
    src: /easy-rsa/pki/ca.crt
    dest: /tmp/ca.crt
    flat: yes
  when: inventory_hostname in groups['ca-server']

- name: copy request to host
  copy:
    src: /tmp/ca.crt
    dest: /etc/openvpn/server/ca.crt
  when: inventory_hostname in groups['openvpn-server']

# Создание дополнительного секретного ключа
- name: create additional secret key
  shell: openvpn --genkey --secret /easy-rsa/ta.key
  when: inventory_hostname in groups['openvpn-server']

- name: copy additional secret key
  copy:
    src: /easy-rsa/ta.key
    dest: /etc/openvpn/server/ta.key
    remote_src: true
  when: inventory_hostname in groups['openvpn-server']

# Добавление правил IPtables
- name: add IPtables rule
  iptables:
    chain: INPUT
    in_interface: "{{ ansible_default_ipv4.interface }}"
    destination_port: 443
    protocol: udp
    jump: ACCEPT
    action: insert
    rule_num: 1
  when: inventory_hostname in groups['openvpn-server']

- name: add IPtables rule
  iptables:
    table: nat
    chain: POSTROUTING
    jump: MASQUERADE
    out_interface: "{{ ansible_default_ipv4.interface }}"
    source: 10.8.0.0/24
    rule_num: 1
  when: inventory_hostname in groups['openvpn-server']

- name: add IPtables rule
  iptables:
    chain: FORWARD
    in_interface: tun+
    jump: ACCEPT
    rule_num: 1
  when: inventory_hostname in groups['openvpn-server']

- name: add IPtables  rule
  iptables:
    chain: FORWARD
    in_interface: "{{ ansible_default_ipv4.interface }}"
    out_interface: tun+
    jump: ACCEPT
    rule_num: 1
  when: inventory_hostname in groups['openvpn-server']

- name: add IPtables  rule
  iptables:
    chain: FORWARD
    in_interface: tun+
    out_interface: "{{ ansible_default_ipv4.interface }}"
    jump: ACCEPT
  when: inventory_hostname in groups['openvpn-server']

- name: output all trafic from tun+
  ansible.builtin.iptables:
    chain: OUTPUT
    out_interface: "{{ ansible_default_ipv4.interface }}"
    jump: ACCEPT
  when: inventory_hostname in groups['openvpn-server']

# Создание шаблона конфига ovpn
- name: server.conf creation
  template:
    src: "server.conf.j2"
    dest: "/etc/openvpn/server/server.conf"
  when: inventory_hostname in groups['openvpn-server']
  notify:
    - restart openvpn

# Включение возможности редиректа трафика
- name: traffic redirection
  blockinfile:
    path: /etc/sysctl.conf
    block: |
      net.ipv4.ip_forward = 1
  notify:
    - accept sysctl
  when: inventory_hostname in groups['openvpn-server']

# Далее будет идти часть по созданию различного рода файлов, используемых в дальнейшем при генерации сертификата клиента

# Создание директории для клиентских конфигов
- name: create directory for client configs
  file: path={{ item.path }} owner={{ item.owner }} group={{ item.group }} mode={{ item.mode }} state=directory
  loop:
    - { path: "/client-configs", owner: "root", group: "root", mode: "700" }
    - { path: "/client-configs/keys", owner: "root", group: "root", mode: "700" }
    - { path: "/client-configs/files", owner: "root", group: "root", mode: "700" }
  when: inventory_hostname in groups['openvpn-server']

# Копирование дополнительного секретного ключа
- name: copy additional secret key
  copy:
    src: /easy-rsa/ta.key
    dest: /client-configs/keys/ta.key
    remote_src: true
  when: inventory_hostname in groups['openvpn-server']

# Копирование сертификата цетра сертификации
- name: copy additional secret key
  copy:
    src: /etc/openvpn/server/ca.crt
    dest: /client-configs/keys/ca.crt
    remote_src: true
  when: inventory_hostname in groups['openvpn-server']

# Создание шаблона конфига ovpn
- name: server.conf creation
  template:
    src: "client-base.conf.j2"
    dest: "/client-configs/client-base.conf"
  when: inventory_hostname in groups['openvpn-server']
